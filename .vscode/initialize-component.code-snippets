{
  // Place your slogup-web-boilerplate workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  "Initialize Component": {
    "prefix": "ic",
    "body": [
      "import React from \"react\";",
      "",
      "interface ${TM_DIRECTORY/^.+\\/(.*)$/$1/}Props {}",
      "",
      "const ${TM_DIRECTORY/^.+\\/(.*)$/$1/}: React.FC<${TM_DIRECTORY/^.+\\/(.*)$/$1/}Props> = () => {",
      "  /**",
      "   * hooks",
      "   * ex) const [state, setState] = useState();",
      "   */",
      "",
      "  /**",
      "   * handler",
      "   * ex) const handleClick = () => {};",
      "   */",
      "",
      "  /**",
      "   * renderer",
      "   * ex) const renderComponent = () => {};",
      "   */",
      "",
      "  return <React.Fragment>${TM_DIRECTORY/^.+\\/(.*)$/$1/}</React.Fragment>;",
      "};",
      "",
      "export default ${TM_DIRECTORY/^.+\\/(.*)$/$1/};"
    ],
    "description": ""
  },
  "Initialize Page Component": {
    "prefix": "ipc",
    "body": [
      "import React from \"react\";",
      "import { Helmet } from \"react-helmet\";",
      "",
      "interface ${Name}PageProps {}",
      "",
      "const ${Name}Page: React.FC<${Name}PageProps> = (props) => {",
      "  /**",
      "   * hooks",
      "   * ex) const [state, setState] = useState();",
      "   */",
      "",
      "  /**",
      "   * handler",
      "   * ex) const handleClick = () => {};",
      "   */",
      "",
      "  /**",
      "   * renderer",
      "   * ex) const renderComponent = () => {};",
      "   */",
      "",
      "  return (",
      "    <>",
      "      <Helmet>",
      "        <title>${Name} Page</title>",
      "        <meta name=\"description\" content=\"${Name} Page\" />",
      "      </Helmet>",
      "    </>",
      "  );};",
      "",
      "export default ${Name}Page;"
    ],
    "description": ""
  },
  "Initialize Story Component": {
    "prefix": "isc",
    "body": [
      "import React from \"react\";",
      "",
      "import { ComponentStory, ComponentMeta } from \"@storybook/react\";",
      "",
      "import ${TM_DIRECTORY/^.+\\/(.*)$/$1/} from \"../${TM_DIRECTORY/^.+\\/(.*)$/$1/}\";",
      "",
      "export default {",
      "  title: \"components/${TM_DIRECTORY/^.+\\/(.*)$/$1/}\",",
      "  component: ${TM_DIRECTORY/^.+\\/(.*)$/$1/},",
      "} as ComponentMeta<typeof ${TM_DIRECTORY/^.+\\/(.*)$/$1/}>;",
      "",
      "const Template: ComponentStory<typeof ${TM_DIRECTORY/^.+\\/(.*)$/$1/}> = () => <${TM_DIRECTORY/^.+\\/(.*)$/$1/} />;",
      "",
      "export const Index = Template.bind({});",
      "Index.args = {};",
      ""
    ],
    "description": ""
  },
  "Generate API Function": {
    "prefix": "gaf",
    "body": [
      "import axiosInstance, { RowResponse, RowsResponse } from \".\";",
      "",
      "const URL = \"/${TM_FILENAME_BASE}\";",
      "",
      "export const get${Model}s = async (params?: ${Model}sReqParams) => {",
      "  const { data } = await axiosInstance.get<RowsResponse<${Model}Dto>>(URL, {",
      "    params,",
      "  });",
      "",
      "  return data;",
      "};",
      "",
      "export const get${Model} = async (id: number) => {",
      "  const { data } = await axiosInstance.get<RowResponse<${Model}Dto>>(",
      "    `\\${URL}/\\${id}`,",
      "  );",
      "",
      "  return data;",
      "};",
      "",
      "export const post${Model} = async (body: Generate${Model}Dto) => {",
      "  await axiosInstance.post(URL, body);",
      "};",
      "",
      "export const put${Model} = async (id: number, body: Modify${Model}Dto) => {",
      "  await axiosInstance.put(`\\${URL}/\\${id}`, body);",
      "};",
      "",
      "export const delete${Model} = async (id: number) => {",
      "  await axiosInstance.delete(`\\${URL}/\\${id}`);",
      "};",
      "",
      "export interface ${Model}sReqParams {}",
      "",
      "export interface ${Model}Dto {}",
      "",
      "export interface Generate${Model}Dto {}",
      "",
      "export interface Modify${Model}Dto {}",
      ""
    ],
    "description": ""
  }
}
